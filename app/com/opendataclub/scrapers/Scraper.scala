package com.opendataclub.scrapers

import com.opendataclub.models.DataImport
import com.opendataclub.models.ExternalDataSource
import scala.util.Try
import slick.backend.DatabaseConfig
import slick.driver.JdbcProfile
import com.opendataclub.models.DataTable
import scala.concurrent.Future
import com.opendataclub.models.DataImportRepository
import com.opendataclub.models.DataTableRepository

trait Scraper {
  // TODO: dependency to repositories should probably be removed. Right now it's necessary because table naming uses ids, which are generated by the database, but that's a wrong design. Maybe moving to UUID-based ids and generate them in the app?
  def run(externalDataSource: ExternalDataSource, dbConfig: DatabaseConfig[JdbcProfile], dataImportRepository: DataImportRepository, dataTableRepository: DataTableRepository): Future[(DataImport, DataTable)]
}